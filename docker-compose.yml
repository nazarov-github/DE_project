services:
  postgres-airflow:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - airflow_net

  postgres-app:
    image: postgres:14
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
      POSTGRES_DB: appdb
    ports:
      - "5434:5432"
    volumes:
      - postgres_app_data:/var/lib/postgresql/data
    networks:
      - airflow_net

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: my-airflow:custom
    restart: always
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "sPGSiFrzRQni2XFRwE_SnUzPaa0K4d7EpT_vpAJ1Oy8="
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark/jars:/home/jovyan/jars
    ports:
      - "8080:8080"
    command: bash -c "airflow webserver"
    networks:
      - airflow_net

  airflow-scheduler:
    image: my-airflow:custom
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "sPGSiFrzRQni2XFRwE_SnUzPaa0K4d7EpT_vpAJ1Oy8="
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark/jars:/home/jovyan/jars
    command: bash -c "airflow scheduler"
    networks:
      - airflow_net

  airflow-triggerer:
    image: my-airflow:custom
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "sPGSiFrzRQni2XFRwE_SnUzPaa0K4d7EpT_vpAJ1Oy8="
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark/jars:/home/jovyan/jars
    command: bash -c "airflow triggerer"
    networks:
      - airflow_net

  airflow-init:
    image: my-airflow:custom
    container_name: airflow-init
    depends_on:
      postgres-airflow:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "sPGSiFrzRQni2XFRwE_SnUzPaa0K4d7EpT_vpAJ1Oy8="
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark/jars:/home/jovyan/jars
    command: bash -c "airflow db init"
    networks:
      - airflow_net

  airflow-create-user:
    image: my-airflow:custom
    container_name: airflow-create-user
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
    command: >
      bash -c "airflow users create
      --username admin
      --password admin
      --firstname Admin
      --lastname User
      --role Admin
      --email admin@example.com"
    networks:
      - airflow_net

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9002:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - airflow_net

  clickhouse:
    image: yandex/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
      CLICKHOUSE_ALLOW_SPARK: "1"
      CLICKHOUSE_NETWORK_COMPRESSION: "1"
    networks:
      - airflow_net

  jupyter:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark
    image: airflow-jupyter
    ports:
      - "8889:8888"
    volumes:
      - ./config/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py
      - ./notebooks:/home/jovyan/notebooks
      - ./spark/jars:/home/jovyan/jars
    networks:
      - airflow_net

  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark
    image: airflow-spark
    ports:
      - "4040:4040"
      - "8890:8888"
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=app_user
      - MINIO_SECRET_KEY=secure_password123
    volumes:
      - ./spark/jars:/home/jovyan/jars
      - ./scripts:/home/jovyan/scripts
    networks:
      - airflow_net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - airflow_net

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - airflow_net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - airflow_net


networks:
  airflow_net:

volumes:
  postgres_airflow_data:
  postgres_app_data:
  postgres_superset_data:
  clickhouse_data:
  minio_data:
  superset_home:
  notebooks:

